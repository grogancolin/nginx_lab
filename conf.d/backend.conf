#load_module modules/ndk_http_module.so;
#load_module modules/ngx_http_lua_module.so;

lua_shared_dict hosts 10m;
upstream lua_backend {
    server 0.0.0.1:1234; #backend:8080;
    balancer_by_lua_block {

        ngx.log(ngx.STDERR, 'Phase: ', ngx.get_phase())
        require "resty.core"
        local counters = ngx.shared.hosts
        local balancer = require "ngx.balancer"
        local host = "127.0.0.2"
        local port = 8080

        local headers = ngx.req.get_headers()

        local hostcounter, err = counters:incr(headers.host, 1, 0)
        ngx.log(ngx.STDERR, 'Host counter for: ', headers.host, ' ', hostcounter)
        if hostcounter > 1 then
            local hostcounter, err = counters:decr(headers.host, -1, 0)
            return ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
        end

        local ok, err = balancer.set_current_peer(host, port)
        if not ok then
            ngx.log(ngx.ERR, "failed to set peer: ", err)
            return ngx.exit(ngx.ERROR)
        end
    }
}

upstream my_backend {
    server backend:8080;
}
server {
    location / {
        proxy_pass http://lua_backend/;
    }
}


server {
    # this server is just for mocking up a backend peer here...
    listen 127.0.0.2:8080;

    location / {
        proxy_pass http://my_backend/;
    }
}
